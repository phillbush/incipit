#!/usr/bin/awk -f

# set constants and call the parser
BEGIN {
	type = "roff"

	if (type == "html")
		html = 1
	else
		troff = 1

	# token type
	NONE = 0
	BLANK = 1
	SECTIONMARK = 2
	ENUMMARK = 3
	FIGUREMARK = 4
	TABLEMARK = 5
	QUOTEBEG = 6
	QUOTEEND = 7
	FOOTNOTE = 8

	# roff markup
	markup["roff", "TITLE", "BEG"] = (ARGC > 2 ? ".CH \"" : ".TL \"")
	markup["roff", "TITLE", "END"] = "\"\n"
	markup["roff", "SUBTITLE", "BEG"] = "\" \""
	markup["roff", "SUBTITLE", "END"] = ""
	markup["roff", "AUTHOR", "BEG"] = ".AU"
	markup["roff", "AUTHOR1", "BEG"] = " \""
	markup["roff", "AUTHOR1", "END"] = "\""
	markup["roff", "AUTHOR2", "BEG"] = " \""
	markup["roff", "AUTHOR2", "END"] = "\" "
	markup["roff", "AUTHOR", "END"] = "\n"
	markup["roff", "ABSTRACT", "BEG"] = ".AB no\n"
	markup["roff", "ABSTRACT", "END"] = ".AE\n"
	markup["roff", "PARAGRAPH", "BEG"] = ".PP"
	markup["roff", "PARATITLE", "BEG"] = " \""
	markup["roff", "PARATITLE", "END"] = "\""
	markup["roff", "PARAGRAPH", "MID"] = "\n"
	markup["roff", "PARAGRAPH", "END"] = ""
	markup["roff", "SECTION", "BEG"] = ".SH %d \""
	markup["roff", "SECTION", "END"] = "\"\n"
	markup["roff", "CODE", "BEG"] = ".CS\n"
	markup["roff", "CODE", "END"] = ".CE\n"
	markup["roff", "EMPHASIS", "BEG"] = "\\fI"
	markup["roff", "EMPHASIS", "END"] = "\\fP"
	markup["roff", "TOPIC", "BEG"] = "“\\fI"
	markup["roff", "TOPIC", "END"] = "\\fP”"
	markup["roff", "PRE", "BEG"] = "\\f(CW"
	markup["roff", "PRE", "END"] = "\\fP"
	markup["roff", "META", "BEG"] = "\\f(CW⟨"
	markup["roff", "META", "END"] = "⟩\\fP"
	markup["roff", "FIGURE", "BEG"] = ".FS\n"
	markup["roff", "FIGURE", "END"] = ".FE\n"
	markup["roff", "ENUMU", "BEG"] = ".LS\n"
	markup["roff", "ENUMU", "END"] = ".LE\n"
	markup["roff", "ENUMO", "BEG"] = ".LS %s\n"
	markup["roff", "ENUMO", "END"] = ".LE\n"
	markup["roff", "ITEM", "BEG"] = ".LI"
	markup["roff", "COLON", "BEG"] = " \""
	markup["roff", "COLON", "END"] = "\""
	markup["roff", "ITEM", "MID"] = "\n"
	markup["roff", "ITEM", "END"] = ""
	markup["roff", "PIC", "BEG"] = ".PS\n"
	markup["roff", "PIC", "END"] = ".PE\n"
	markup["roff", "EQN", "BEG"] = ".EQ\n"
	markup["roff", "EQN", "END"] = ".EN\n"
	markup["roff", "IMAGE", "BEG"] = ".PP\n"
	markup["roff", "IMAGE", "MID"] = ".BP \"%s\" \"\" \"\" \"c\" \"\" \"\" \"\"\n"
	markup["roff", "IMAGE", "END"] = ""
	markup["roff", "FIGCAPTION", "MID"] = ".FC \"%s\" \"f\"\n"
	markup["roff", "TABCAPTION", "MID"] = ".FC \"%s\" \"t\"\n"
	markup["roff", "TABLE", "BEG"] = ".TS\ncenter, %s;\n"
	markup["roff", "TABLE", "END"] = ".TE\n"
	markup["roff", "TH1", "BEG"] = "T{\n"
	markup["roff", "TH1", "END"] = "\nT}"
	markup["roff", "THN", "BEG"] = "\tT{\n"
	markup["roff", "THN", "END"] = "\nT}"
	markup["roff", "COL1", "BEG"] = "T{\n"
	markup["roff", "COL1", "END"] = "\nT}"
	markup["roff", "COLN", "BEG"] = "\tT{\n"
	markup["roff", "COLN", "END"] = "\nT}"
	markup["roff", "ROW", "BEG"] = ""
	markup["roff", "ROW", "END"] = "\n"
	markup["roff", "QUOTE", "BEG"] = ".QS\n"
	markup["roff", "QUOTE", "END"] = ".QE\n"
	markup["roff", "FOOTNOTE", "BEG"] = "\\c\n.NS"
	markup["roff", "FOOTNOTE", "END"] = ".NE\n"

	# html markup
	markup["html", "TITLE", "BEG"] = "<h1 id=\"%s\">"
	markup["html", "TITLE", "END"] = "</h1>\n"
	markup["html", "SUBTITLE", "BEG"] = "<br/>"
	markup["html", "SUBTITLE", "END"] = ""
	markup["html", "AUTHOR", "BEG"] = "<p>"
	markup["html", "AUTHOR1", "BEG"] = ""
	markup["html", "AUTHOR1", "END"] = ""
	markup["html", "AUTHOR2", "BEG"] = "<br/>"
	markup["html", "AUTHOR2", "END"] = ""
	markup["html", "AUTHOR", "END"] = "</p>\n"
	markup["html", "ABSTRACT", "BEG"] = "<p>"
	markup["html", "ABSTRACT", "END"] = "</p>\n"
	markup["html", "PARAGRAPH", "BEG"] = "<p>"
	markup["html", "PARATITLE", "BEG"] = "<strong>"
	markup["html", "PARATITLE", "END"] = "</strong> "
	markup["html", "PARAGRAPH", "MID"] = ""
	markup["html", "PARAGRAPH", "END"] = "</p>\n"
	markup["html", "SECTION", "BEG"] = "<h%d id=\"%s\">"
	markup["html", "SECTION", "END"] = "</h%d>\n"
	markup["html", "CODE", "BEG"] = "<pre><code>"
	markup["html", "CODE", "END"] = "</pre></code>\n"
	markup["html", "EMPHASIS", "BEG"] = "<em>"
	markup["html", "EMPHASIS", "END"] = "</em>"
	markup["html", "TOPIC", "BEG"] = "“<em>"
	markup["html", "TOPIC", "END"] = "</em>”"
	markup["html", "PRE", "BEG"] = "<code>"
	markup["html", "PRE", "END"] = "</code>"
	markup["html", "META", "BEG"] = "<code>⟨"
	markup["html", "META", "END"] = "⟩</code>"
	markup["html", "ENUMU", "BEG"] = "<ul>"
	markup["html", "ENUMU", "END"] = "</ul>\n"
	markup["html", "ENUMO", "BEG"] = "<ol>"
	markup["html", "ENUMO", "END"] = "</ol>\n"
	markup["html", "ITEM", "BEG"] = "<li>"
	markup["html", "COLON", "BEG"] = "<strong>"
	markup["html", "COLON", "END"] = "</strong>"
	markup["html", "FIGURE", "BEG"] = "<figure>"
	markup["html", "FIGURE", "END"] = "</figure>\n"
	markup["html", "ITEM", "MID"] = ""
	markup["html", "ITEM", "END"] = "</li>\n"
	markup["html", "VIDEO", "BEG"] = ""
	markup["html", "VIDEO", "MID"] = "<video controls=\"\"><source src=\"%s\"></video>"
	markup["html", "VIDEO", "END"] = ""
	markup["html", "IMAGE", "BEG"] = ""
	markup["html", "IMAGE", "MID"] = "<img src=\"%s\" alt=\"%s\">"
	markup["html", "IMAGE", "END"] = ""
	markup["html", "FIGCAPTION", "MID"] = "<figcaption>%s</figcaption>\n"
	markup["html", "TABCAPTION", "MID"] = "<figcaption>%s</figcaption>\n"
	markup["html", "TABLE", "BEG"] = "<table>"
	markup["html", "TABLE", "END"] = "</table>\n"
	markup["html", "TH1", "BEG"] = "<th>"
	markup["html", "TH1", "END"] = "</th>\n"
	markup["html", "THN", "BEG"] = "<th>"
	markup["html", "THN", "END"] = "</th\n>"
	markup["html", "COL1", "BEG"] = "<td>"
	markup["html", "COL1", "END"] = "</td>\n"
	markup["html", "COLN", "BEG"] = "<td>"
	markup["html", "COLN", "END"] = "</td>\n"
	markup["html", "ROW", "BEG"] = "<tr>"
	markup["html", "ROW", "END"] = "</tr>\n"
	markup["html", "QUOTE", "BEG"] = "<blockquote>"
	markup["html", "QUOTE", "END"] = "</blockquote>\n"
	markup["html", "LINK", "BEG"] = "<a href=\""
	markup["html", "LINK", "MID"] = "\">"
	markup["html", "LINK", "END"] = "</a>"

	document()
}

# get line from file
function fgetline() {
	return getline < file
}

# unget token
function ungettok() {
	if (!eof) {
		savedtok = 1
	}
}

# get token
function gettok(    a, n) {
	if (eof)
		return -1
	if (savedtok) {
		savedtok = 0
		return 1
	}
	if (length(line) == 0) {
		if (fgetline() <= 0) {
			eof = 1
			return -1
		} else {
			line = $0
			n = split(line, a)
			if (n == 0) {
				toktype = BLANK
				tok = line
				line = ""
			} else if (match(line, /^[[][*][]]: */)) {
				toktype = FOOTNOTE
				tok = substr(line, RSTART + RLENGTH)
				line = ""
			} else if (match(line, /^\t*• *(\([^)]+\))? *([^:]+: +)?/)) {
				toktype = ENUMMARK
				tok = substr(line, RSTART, RLENGTH)
				line = substr(line, RSTART + RLENGTH)
			} else if (match(line, /^(§)+[ \t]*/)) {
				toktype = SECTIONMARK
				tok = substr(line, RSTART, RLENGTH)
				sub(/[ \t]*/, "", tok)
				line = substr(line, RSTART + RLENGTH)
			} else if (line ~ /[ \t]*{$/) {
				toktype = FIGUREMARK
				tok = line
				line = ""
			} else if (line ~ /^[ \t]*┌.*┐[ \t]*$/) {
				toktype = TABLEMARK
				tok = line
				line = ""
			} else if (line ~ /^[ \t]*“[ \t]*$/) {
				toktype = QUOTEBEG
				tok = line
				line = ""
			} else if (line ~ /^[ \t]*”[ \t]*$/) {
				toktype = QUOTEEND
				tok = line
				line = ""
			} else {
				toktype = NONE
				tok = line
				line = ""
			}
		}
	} else {
		toktype = NONE
		tok = line
		line = ""
	}
	return 1
}

# get id from string
function genid(s) {
	sub(/^[ \t]+/, "", s)
	gsub(/[ \t]+/, "-", s)
	gsub(/[^-#A-Za-z0-9_/]/, "", s)
	return tolower(s)
}

# escape metacharacters
function escape(s) {
	if (troff) {
		gsub(/\\/, "\\e", s)
		gsub(/"/, "\\(dq", s)
		gsub(/'/, "\\(aq", s)
		gsub(/-/, "\\(hy", s)
		gsub(/\./, "\\\\\\&&", s)
	} else if (html) {
		gsub(/&/, "\\&amp;", s)
		gsub(/</, "\\&lt;", s)
		gsub(/>/, "\\&gt;", s)
		gsub(/"/, "\\&quot;", s)
	}
	return s
}

# do inline punctuation expansion
function punctuate(after,    before, punct, puncttype, matched, len) {
	after = escape(after)
	before = ""
	punct = ""
	RSTART = 0
	RLENGTH = 0
	while (match(after, /\{|\}|⟨|⟩|`|‘|’|“|”/) || (puncttype && after)) {
		matched = RSTART
		if (matched) {
			before = before substr(after, 1, RSTART - 1)
			punct = substr(after, RSTART, RLENGTH)
			after = substr(after, RSTART + RLENGTH)
			len = length(punct)
			if (puncttype == "" && substr(after, 1, len) == punct) {
				before = before punct
				punct = ""
				after = substr(after, len + 1)
				continue
			}
		} else {
			before = before after
			punct = ""
			after = ""
		}
		if (puncttype) {
			if (puncttype == "{" && punct == "}") {
				before = before markup[type, "PRE", "END"]
				puncttype = ""
			} else if (puncttype == "`" && punct == "`") {
				before = before markup[type, "PRE", "END"]
				puncttype = ""
			} else if (puncttype == "‘" && punct == "’") {
				before = before markup[type, "EMPHASIS", "END"]
				puncttype = ""
			} else if (puncttype == "⟨" && punct == "⟩") {
				before = before markup[type, "META", "END"]
				puncttype = ""
			} else if (puncttype == "“" && punct == "”") {
				before = before punct
				puncttype = ""
			}
		} else if (punct == "⟨" || punct == "{" || punct == "`" ||punct == "“" || punct == "‘") {
			if (punct == "{") {
				before = before markup[type, "PRE", "BEG"]
			} else if (punct == "`") {
				before = before markup[type, "PRE", "BEG"]
			} else if (punct == "‘") {
				before = before markup[type, "EMPHASIS", "BEG"]
			} else if (punct == "⟨") {
				before = before markup[type, "META", "BEG"]
			} else if (punct == "“") {
				before = before "“"
			}
			puncttype = punct
		}
		if (!matched) {
			after = ""
		}
	}
	return before after
}

# parse document incipit
function docincipit(    n) {
	while (!eof && toktype == NONE) {
		sub(/^ +/, "", tok)
		printf markup[type, (n ? "AUTHOR" : "TITLE"), "BEG"], genid(tok)
		s = substr(tok, length(tok), 1) == ":"
		if (troff)
			sub(/:$/, "", tok)
		printf markup[type, (n ? "AUTHOR1" : ""), "BEG"]
		printf "%s", escape(tok)
		printf markup[type, (n ? "AUTHOR1" : ""), "END"]
		if (s) {
			if (gettok() > 0) {
				if (toktype == NONE) {
					sub(/^ +/, "", tok)
					printf markup[type, (n ? "AUTHOR2" : "SUBTITLE"), "BEG"]
					sub(/.$/, "", tok)
					printf "%s", escape(tok)
					printf markup[type, (n ? "AUTHOR2" : "SUBTITLE"), "END"]
				} else {
					ungettok()
				}
			}
		}
		printf markup[type, (n ? "AUTHOR" : "TITLE"), "END"]
		gettok()
		n++
	}
	ungettok()
}

# parse prose unit (paragraph + enumeration + footnotes)
function prose(    para, period, notes, enums, label, colon, lvl, s, n, m, i, j, k) {
	if (toktype == NONE) {                  # paragraph
		period = ""
		for (i = 0; i < quotelvl; i++)
			sub(/^\t/, "", tok)
		if (match(tok, /^[.].+/)) {
			period = sprintf("%s%s%s",                \
				markup[type, "PARATITLE", "BEG"], \
				punctuate(substr(tok, 2)),        \
				markup[type, "PARATITLE", "END"])
		} else {
			para = tok "\n"
		}
		gettok()
		while (!eof && toktype == NONE) {
			for (i = 0; i < quotelvl; i++)
				sub(/^\t/, "", tok)
			para = para tok "\n"
			gettok()
		}
		ungettok()
		para = sprintf("%s%s%s%s%s",              \
			markup[type, "PARAGRAPH", "BEG"], \
			period,                           \
			markup[type, "PARAGRAPH", "MID"], \
			punctuate(para),                  \
			markup[type, "PARAGRAPH", "END"])
		while (gettok() > 0 && toktype == BLANK) {
			;
		}
	}
	while (toktype == ENUMMARK) {           # enumeration
		lvl[++n] = 1
		colon = ""
		label[n] = ""
		for (i = 0; i < quotelvl; i++)
			sub(/^\t/, "", tok)
		while (tok ~ /^\t/) {
			lvl[n]++
			sub(/^\t/, "", tok)
		}
		sub(/^• */, "", tok)
		if (tok)
			enums[n] = tok "\n"
		while (gettok() > 0 && toktype == NONE) {
			sub(/^ +/, "", tok)
			enums[n] = enums[n] tok "\n"
		}
		if (match(enums[n], /^\([^\)]+\)/)) {
			label[n] = substr(enums[n], RSTART + 1, RLENGTH - 2)
			enums[n] = substr(enums[n], RSTART + RLENGTH)
			sub(/^[ \n]+/, "", enums[n])
		}
		if (match(enums[n], /^[^\n:]+:/)) {
			colon = substr(enums[n], RSTART, RLENGTH)
			enums[n] = substr(enums[n], RSTART + RLENGTH)
			sub(/^[ \n]+/, "", enums[n])
			colon = sprintf("%s%s%s",             \
				markup[type, "COLON", "BEG"], \
				punctuate(colon),             \
				markup[type, "COLON", "END"])
		}
		enums[n] = sprintf("%s%s%s%s%s",     \
			markup[type, "ITEM", "BEG"], \
			colon,                       \
			markup[type, "ITEM", "MID"], \
			punctuate(enums[n]),         \
			markup[type, "ITEM", "END"])
		ungettok()
		while (gettok() > 0 && toktype == BLANK) {
			;
		}
	}
	while (toktype == FOOTNOTE) {           # footnotes
		notes[++m] = tok "\n"
		while (gettok() > 0 && toktype == NONE)
			notes[m] = notes[m] tok "\n"
		notes[m] = punctuate(notes[m])
		ungettok()
		while (gettok() > 0 && toktype == BLANK) {
			;
		}
	}
	ungettok()
	for (i = j = k = 0; i <= n; i++) {
		if (i == 0) {
			while (match(para, / *[[][*][]][^\n ]*[ \n]*/)) {
				printf "%s", substr(para, 1, RSTART - 1)
				s = substr(para, RSTART, RLENGTH)
				para = substr(para, RSTART + RLENGTH)
				if (j < m) {
					if (match(s, /[[][*][]][^\n ]+/)) {
						printf "%s", markup[type, "FOOTNOTE", "BEG"]
						printf " \"%s\"\n", substr(s, 4)
					} else {
						printf "%s\n", markup[type, "FOOTNOTE", "BEG"]
					}
					printf "%s", notes[++j]
					printf "%s", markup[type, "FOOTNOTE", "END"]
				}
				s = ""
			}
			printf "%s", para
			para = ""
		} else {
			while (k > lvl[i]) {
				printf markup[type, (label[i] ? "ENUMO" : "ENUMU"), "END"];
				k--
			}
			while (k < lvl[i]) {
				k++
				printf markup[type, (label[i] ? "ENUMO" : "ENUMU"), "BEG"], label[i]
			}
			delete lvl[i]
			while (match(enums[i], / *[[][*][]][^\n ]*[ \n]*/)) {
				printf "%s", substr(enums[i], 1, RSTART - 1)
				s = substr(enums[i], RSTART, RLENGTH)
				enums[i] = substr(enums[i], RSTART + RLENGTH)
				if (j < m) {
					if (match(s, /[[][*][]][^\n ]+/)) {
						printf "%s", markup[type, "FOOTNOTE", "BEG"]
						printf " \"%s\"\n", substr(s, 4)
					} else {
						printf "%s\n", markup[type, "FOOTNOTE", "BEG"]
					}
					printf "%s", notes[++j]
					printf "%s", markup[type, "FOOTNOTE", "END"]
				}
				s = ""
			}
			printf "%s", enums[i]
			delete enums[i]
		}
	}
	while (k > 0) {
		printf markup[type, (label[k] ? "ENUMO" : "ENUMU"), "END"];
		k--
	}
	delete enums
	delete lvl
	delete label
}

# parse section heading
function section(    lvl) {
	lvl = (type == "html") ? 1 : 0
	while (match(tok, /^(§)/)) {
		lvl++
		tok = substr(tok, RSTART + RLENGTH)
	}
	if (gettok() <= 0)
		return
	printf markup[type, "SECTION", "BEG"], lvl, genid(tok)
	printf "%s", escape(tok)
	printf markup[type, "SECTION", "END"], lvl
}

# parse figure
function figure(    figtype, i) {
	line = ""
	if (substr(tok, 1, 6) == "IMAGE:") {
		figtype = "IMAGE"
	} else if (substr(tok, 1, 6) == "VIDEO:" && html) {
		figtype = "VIDEO"
	} else if (substr(tok, 1, 4) == "PIC:" && troff) {
		figtype = "PIC"
	} else if (substr(tok, 1, 4) == "EQN:" && troff) {
		figtype = "EQN"
	} else {
		figtype = "CODE"
	}
	sub(/^[A-Z]+:[ \t]*/, "", tok)
	sub(/[ \t]*{$/, "", tok)
	caption = tok
	printf "%s", markup[type, "FIGURE", "BEG"]
	printf "%s", markup[type, figtype, "BEG"]
	while ((ret = fgetline()) == 1) {
		for (i = 0; i < quotelvl; i++)
			sub(/^\t/, "")
		if ($0 == "}")
			break
		sub(/^[ \t]/, "")
		if (figtype == "IMAGE") {
			sub(/^[ \t]+/, "")
			sub(/[ \t]+$/, "")
			printf markup[type, "IMAGE", "MID"], $0, caption
		} else if (figtype == "VIDEO") {
			sub(/^[ \t]+/, "")
			sub(/[ \t]+$/, "")
			printf markup[type, "VIDEO", "MID"], $0, caption
		} else if (figtype == "PIC") {
			gsub(/‘/, markup[type, "EMPHASIS", "BEG"])
			gsub(/’/, markup[type, "EMPHASIS", "END"])
			gsub(/“/, "\"" markup[type, "EMPHASIS", "BEG"])
			gsub(/”/, markup[type, "EMPHASIS", "END"] "\"")
			print
		} else if (figtype == "EQN") {
			print
		} else {
			printf "%s\n", escape($0)
		}
	}
	if (ret != 1) {
		eof = 1
	}
	printf "%s", markup[type, figtype, "END"]
	if (caption != "")
		printf markup[type, "FIGCAPTION", "MID"], caption
	printf "%s", markup[type, "FIGURE", "END"]
}

# parse table
function table(    ret, div, sep, tbl, ncol, nrow, caption) {
	div = sep = 0
	col = ncol = nrow = 1
	while ((ret = fgetline()) == 1) {
		if ($0 ~ /^[ \t]*└.*┘[ \t]*/)
			break
		if ($0 ~ /─/) {
			div = 1
			nrow++
			continue
		} if ($0 ~ /═/) {
			nrow++
			div = 1
			sep = 1
			continue
		}
		col = 1
		for (i = 2; i < NF; i++) {
			if ($i == "│") {
				if (++col > ncol) {
					ncol++
				}
			} else {
				tbl[nrow, col] = tbl[nrow, col] (tbl[nrow, col] != "" ? " " : "") $i
			}
		}
		if (div && !sep) {
			nrow++
		}
	}
	if (div && !sep) {
		nrow--
	}
	if (ret != 1) {
		eof = 1
	}
	printf markup[type, "FIGURE", "BEG"]
	printf markup[type, "TABLE", "BEG"], (div && !sep ? "box" : "allbox")
	if (troff) {
		for (i = 1; i <= nrow; i++) {
			for (j = 1; j <= ncol; j++) {
				printf "%s", (j == 1 ? "" : " ")
				if (i == 1) {
					printf "c"
				} else if (tbl[i, j] == "''") {
					printf "^"
				} else {
					printf "l"
				}
			}
			printf "%s\n", (i == nrow ? "." : "")
		}
	}
	for (i = 1; i <= nrow; i++) {
		printf "%s", markup[type, "ROW", "BEG"]
		for (j = 1; j <= ncol; j++) {
			printf "%s", markup[type, (i == 1 ? "TH" : "COL") (j == 1 ? "1" : "N"), "BEG"]
			printf "%s", punctuate(tbl[i, j])
			printf "%s", markup[type, (i == 1 ? "TH" : "COL") (j == 1 ? "1" : "N"), "END"]
		}
		printf "%s", markup[type, "ROW", "END"]
		if (i == 1 && troff) {
			printf "_\n"
		}
	}
	gettok()
	while (!eof && toktype == NONE) {
		caption = caption (caption != "" ? " " : "") tok
		gettok()
	}
	ungettok()
	printf "%s", markup[type, "TABLE", "END"]
	if (caption != "")
		printf markup[type, "TABCAPTION", "MID"], caption
	printf markup[type, "FIGURE", "END"]
}

# parse blockquote
function quote() {
	printf "%s", markup[type, "FIGURE", "BEG"]
	printf "%s", markup[type, "QUOTE", "BEG"]
	quotelvl++
	while (gettok() > 0) {
		if (toktype == QUOTEEND) {
			break
		} else if (toktype == SECTIONMARK) {
			section()
		} else if (toktype == FIGUREMARK) {
			figure()
		} else if (toktype == TABLEMARK) {
			table()
		} else if (toktype == QUOTEBEG) {
			quote()
		} else if (toktype == NOTE || toktype == ENUMMARK) {
			prose()
		}
	}
	quotelvl--
	printf "%s", markup[type, "QUOTE", "END"]
	printf "%s", markup[type, "FIGURE", "END"]
}

# parse the entire document
function document(  i, n) {
	for (i = 1; i < ARGC; i++) {
		file = ARGV[i]
		eof = 0
		n = 0
		while (gettok() > 0) {
			if (toktype == SECTIONMARK) {
				section()
			} else if (toktype == FIGUREMARK) {
				figure()
			} else if (toktype == TABLEMARK) {
				table()
			} else if (toktype == QUOTEBEG) {
				quote()
			} else if (toktype == NOTE || toktype == ENUMMARK) {
				if (!n) {
					docincipit()
				} else {
					prose()
				}
			}
			n = 1
		}
	}
	if (html) {
		print ""
	}
}
